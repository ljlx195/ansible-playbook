- name: install package
  hosts: webservers
  remote_user: root
  vars_files:
  - group_vars/all
  tasks:
  # - name: Pretreatment
  #   shell: cp -rfpd /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
  # - name: CentOS-Base copy
  #   copy: src=Centos-7.repo dest=/etc/yum.repos.d/CentOS-Base.repo
  # - name: epel-7.repo copy
  #   copy: src=epel-7.repo dest=/etc/yum.repos.d/epel.repo
  # - name: wandisco-svn.repo copy
  #   copy: src=wandisco-svn.repo dest=/etc/yum.repos.d/wandisco-svn.repo
  # - name: install necessary modules
    yum:
      name:
      # - https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
      # - centos-release-scl-rh
      # - git
      # - wget
      # - curl
      # - bison
      # - flex
      # - vim-minimal
      # - vim-filesystem
      # - vim-enhanced
      # - vim-common
      # - vim-X11
      # - net-tools.x86_64
      # - bind-utils
      # - mlocate
      # - bzip2
      # - file
      # - java-11-openjdk
      # - glibc-utils
      # - subversion
      - git-lfs
      # - git-gui
      # - git-svn
      # - gitk
      # - libdrm-devel
      - llvm7.0-devel
      # - libxshmfence-devel
      # - libxkbcommon-x11-devel
      # - libxcb-devel
      # - xcb-util-devel
      - xcb-util-cursor-devel
      # - xcb-util-image-devel
      # - xcb-util-keysyms-devel
      - xcd-util-renderutil-devel
      # - xcb-util-wm-devel
      # - xcb-proto
      # - wayland-protocols-devel
      # - wayland-devel
      # - libXext-devel
      # - libxkbcommon-devel
      # - libXdamage-devel
      # - libXxf86vm-devel
      # - libXrandr-devel
      # - elfutils-libelf-devel
      # - bzip2-devel
      - gbdm-devel
      # - libffi-devel
      # - readline-devel
      # - sqlite-devel
      # - tk-devel
      # - uuid-devel
      # - xz-devel
      # - perl-Test-Harness
      # - perl-Test-Simple
      # - texinfo
      - devtoolset-9-toolchain
      - devtoolset-9-libasan-devel.x86_64
      - devtoolset-9-liblsan-devel.x86_64
      - devtoolset-9-libtsan-devel.x86_64
      - devtoolset-9-libubsan-devel.x86_64
      # - perl-Thread-Queue
      # - autoconf
      # - openssh-server
      state: present
  
  # install make
  - name: Download make
    get_url:
      url: https://ftp.gnu.org/gnu/make/make-{{ MAKE_VERSION }}.tar.bz2
      dest: /opt/make-{{ MAKE_VERSION }}.tar.bz2
  
  - name: Extract make archive
    unarchive:
      dest: /opt
      src: /opt/make-{{ MAKE_VERSION }}.tar.bz2
      creates: /opt/make-{{ MAKE_VERSION }}
      copy: no

  - name: install make
    shell: |
      cd /opt/make-{{ MAKE_VERSION }}
      source scl_source enable devtoolset-9
      ./configure --prefix=/usr
      make -j "$(nproc)"
      make PERL5LIB=$PWD/tests/ check || true
      make install
      cd ..
      rm -rf make-{{ MAKE_VERSION }}*
      ldconfig
  
  # # install binutils
  # - name: Download binutils
  #   get_url:
  #     url: https://ftp.gnu.org/gnu/binutils/binutils-{{ BINUTILS_VERSION }}.tar.xz
  #     dest: /opt/binutils-{{ BINUTILS_VERSION }}.tar.xz
  
  # - name: Extract binutils archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/binutils-{{ BINUTILS_VERSION }}.tar.xz
  #     creates: /opt/binutils-{{ BINUTILS_VERSION }}
  #     copy: no

  # - name: install binutils
  #   shell: |
  #     cd /opt/binutils-{{ BINUTILS_VERSION }}
  #     source scl_source enable devtoolset-9
  #     mkdir build && cd build
  #     ../configure --prefix=/usr --enable-gold --enable-ld=default --enable-plugins --enable-shared  --disable-werror --enable-64-bit-bfd --with-system-zlib
  #     make -j "$(nproc)"
  #     make -k check || true
  #     make install
  #     cd ../../
  #     rm -rf binutils-*

  # # install gmp
  # - name: Download gmp
  #   get_url:
  #     url: https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/gmp-{{ GMP_VERSION }}.tar.bz2
  #     dest: /opt/gmp-{{ GMP_VERSION }}.tar.bz2
  
  # - name: Extract gmp archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/gmp-{{ GMP_VERSION }}.tar.bz2
  #     creates: /opt/gmp-{{ GMP_VERSION }}
  #     copy: no

  # - name: install gmp
  #   shell: |
  #     cd /opt/gmp-{{ GMP_VERSION }}
  #     source scl_source enable devtoolset-9
  #     ./configure --prefix=/usr --enable-cxx --disable-static --docdir=/usr/share/doc/gmp-6.1.2
  #     make -j "$(nproc)"
  #     make -j "$(nproc)" html
  #     make check 2>&1 | tee gmp-check-log || true
  #     awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log
  #     make install
  #     ldconfig
  #     make install-html
  #     cd ..
  #     rm -rf gmp-{{ GMP_VERSION }}*

  # # install mpfr
  # - name: Download mpfr
  #   get_url:
  #     url: https://ftp.gnu.org/gnu/mpfr/mpfr-{{ MPFR_VERSION }}.tar.bz2
  #     dest: /opt/mpfr-{{ MPFR_VERSION }}.tar.bz2
  
  # - name: Extract mpfr archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/mpfr-{{ MPFR_VERSION }}.tar.bz2
  #     creates: /opt/mpfr-{{ MPFR_VERSION }}
  #     copy: no

  # - name: install mpfr
  #   shell: |
  #     cd /opt/mpfr-{{ MPFR_VERSION }}
  #     ./configure --prefix=/usr --disable-static --enable-thread-safe --docdir=/usr/share/doc/mpfr-${MPFR_VERSION}
  #     make -j "$(nproc)" 
  #     make -j "$(nproc)" 
  #     make  check || true
  #     make install
  #     ldconfig
  #     make install-html 
  #     cd .. 
  #     rm -rf mpfr-{{ MPFR_VERSION }}*

  # # install mpc
  # - name: Download mpc
  #   get_url:
  #     url: https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/mpc-{{ MPC_VERSION }}.tar.gz
  #     dest: /opt/mpc-{{ MPC_VERSION }}.tar.gz
  
  # - name: Extract mpc archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/mpc-{{ MPC_VERSION }}.tar.gz
  #     creates: /opt/mpc-{{ MPC_VERSION }}
  #     copy: no

  # - name: install mpc
  #   shell: |
  #     cd /opt/mpc-{{ MPC_VERSION }}
  #     ./configure --prefix=/usr --disable-static --docdir=/usr/share/doc/mpc-${MPC_VERSION}
  #     make -j "$(nproc)" 
  #     make -j "$(nproc)" html
  #     make  check || true
  #     make install
  #     ldconfig
  #     make install-html
  #     cd ..
  #     rm -rf mpc-{{ MPC_VERSION }}*

  # # install gcc
  # - name: Download gcc
  #   get_url:
  #     url: https://mirrors.kernel.org/gnu/gcc/gcc-{{ gcc_version }}/gcc-{{ gcc_version }}.tar.gz
  #     dest: /opt/gcc-{{ gcc_version }}.tar.gz
  
  # - name: Extract gcc archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/gcc-{{ gcc_version }}.tar.gz
  #     creates: /opt/gcc-{{ gcc_version }}
  #     copy: no

  # - name: install gcc
  #   shell: |
  #     cd /opt/gcc-{{ gcc_version }}
  #     ./contrib/download_prerequisites 
  #     mkdir build 
  #     cd build 
  #     ../configure --prefix=/usr --enable-checking=release --enable-language=c,c++,fortran,go -disable-multilib 
  #     make -j "$(nproc)" 
  #     make install-strip 
  #     ln -snf /usr/bin/gcc /usr/bin/cc 
  #     cd ../.. 
  #     rm -rf  gcc-{{ gcc_version }}* 
  #     ldconfig  

  # # install gdb
  # - name: Download gdb
  #   get_url:
  #     url: https://mirrors.kernel.org/gnu/gdb/gdb-{{ gdb_version }}.tar.gz
  #     dest: /opt/gdb-{{ gdb_version }}.tar.gz
  
  # - name: Extract gdb archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/gdb-{{ gdb_version }}.tar.gz
  #     creates: /opt/gdb-{{ gdb_version }}
  #     copy: no

  # - name: install gdb
  #   shell: |
  #     cd /opt/gdb-{{ gdb_version }}
  #     mkdir build 
  #     cd build 
  #     ../configure --prefix=/usr 
  #     make -j "$(nproc)"
  #     make install 
  #     cd ../.. 
  #     rm -rf  gdb-{{ gdb_version }}* 
  #     ldconfig

  # # install automake
  # - name: Download automake
  #   get_url:
  #     url: https://ftp.gnu.org/gnu/automake/automake-{{ AUTOMAKE_VERSION }}.tar.gz
  #     dest: /opt/automake-{{ AUTOMAKE_VERSION }}.tar.gz
  
  # - name: Extract automake archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/automake-{{ AUTOMAKE_VERSION }}.tar.gz
  #     creates: /opt/automake-{{ AUTOMAKE_VERSION }}
  #     copy: no

  # - name: install automake
  #   shell: |
  #     cd /opt/automake-{{ AUTOMAKE_VERSION }}
  #     ./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.16.1 
  #     make -j "$(nproc)"
  #     make -j4 check || true 
  #     make install 
  #     ldconfig 
  #     cd .. 
  #     rm -rf automake-{{ AUTOMAKE_VERSION }}*

  # # install ELFUTILS
  # - name: Download ELFUTILS
  #   get_url:
  #     url: https://sourceware.org/elfutils/ftp/{{ ELFUTILS_VERSION }}/elfutils-{{ ELFUTILS_VERSION }}.tar.bz2
  #     dest: /opt/elfutils-{{ ELFUTILS_VERSION }}.tar.bz2
  
  # - name: Extract ELFUTILS archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/elfutils-{{ ELFUTILS_VERSION }}.tar.bz2
  #     creates: /opt/elfutils-{{ ELFUTILS_VERSION }}
  #     copy: no

  # - name: install ELFUTILS
  #   shell: |
  #     cd /opt/elfutils-{{ ELFUTILS_VERSION }}
  #     ./configure --prefix=/usr 
  #     make -j "$(nproc)" &&  \
  #     make check || true  
  #     make -C libelf install 
  #     install -vm644 config/libelf.pc /usr/lib/pkgconfig 
  #     cd .. 
  #     rm -rf elfutils-{{ ELFUTILS_VERSION }}* 
  #     ldconfig

  # # install CMake
  # - name: Download CMake
  #   get_url:
  #     url: https://cmake.org/files/v{{ CMAKE_VERSION }}/cmake-{{ CMAKE_VERSION }}.{{ CMAKE_BUILD_VERSION }}-linux-x86_64.sh
  #     dest: /opt/cmake-{{ CMAKE_VERSION }}.{{ CMAKE_BUILD_VERSION }}-linux-x86_64.sh
  
  # # - name: Extract CMake archive
  # #   unarchive:
  # #     dest: /opt
  # #     src: /opt/elfutils-{{ ELFUTILS_VERSION }}.tar.bz2
  # #     creates: /opt/elfutils-{{ ELFUTILS_VERSION }}
  # #     copy: no

  # - name: install CMake
  #   shell: |
  #     mkdir /opt/cmake
  #     cd /opt
  #     sh cmake-${CMAKE_VERSION}.${CMAKE_BUILD_VERSION}-linux-x86_64.sh --prefix=/usr --skip-license
  #     rm -f cmake-${CMAKE_VERSION}}.${CMAKE_BUILD_VERSION}-linux-x86_64.sh

  # # install OPENSSL
  # - name: Download OPENSSL
  #   get_url:
  #     url: https://www.openssl.org/source/openssl-{{ OPENSSL_VERSION }}.tar.gz
  #     dest: /opt/openssl-{{ OPENSSL_VERSION }}.tar.gz
  
  # - name: Extract OPENSSL archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/openssl-{{ OPENSSL_VERSION }}.tar.gz
  #     creates: /opt/openssl-{{ OPENSSL_VERSION }}
  #     copy: no

  # - name: install OPENSSL
  #   shell: |
  #     cd /opt/openssl-{{ OPENSSL_VERSION }}
  #     ./config --prefix=/usr --openssldir=/usr shared zlib 
  #     make -j$(nproc) 
  #     make TESTS=-test_afalg test 
  #     make install 
  #     cd ..
  #     rm -rf openssl-{{ OPENSSL_VERSION }}*
  #     ldconfig

  # # install PCRE
  # - name: Download PCRE
  #   get_url:
  #     url: https://github.com/PCRE2Project/pcre2/releases/download/pcre{{ PCRE_VERSION }}/pcre{{ PCRE_VERSION }}.tar.gz
  #     dest: /opt/pcre{{ PCRE_VERSION }}.tar.gz
  
  # - name: Extract PCRE archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/pcre{{ PCRE_VERSION }}.tar.gz
  #     creates: /opt/pcre{{ PCRE_VERSION }}
  #     copy: no

  # - name: install PCRE
  #   shell: |
  #     cd /opt/pcre{{ PCRE_VERSION }}
  #     ./configure --prefix=/usr 
  #     make -j $(nproc) 
  #     make install
  #     cd ..
  #     rm -rf pcre{{ PCRE_VERSION }}

  # # install SWIG
  # - name: Download SWIG
  #   get_url:
  #     url: https://github.com/swig/swig/archive/rel-{{ SWIG_VERSION }}.tar.gz
  #     dest: /opt/rel-{{ SWIG_VERSION }}.tar.gz
  
  # - name: Extract SWIG archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/rel-{{ SWIG_VERSION }}.tar.gz
  #     creates: /opt/rel-{{ SWIG_VERSION }}
  #     copy: no

  # - name: install SWIG
  #   shell: | 
  #     cd /opt/rel-{{ SWIG_VERSION }}
  #     ./autogen.sh && ./configure --prefix=/usr --without-pcre
  #     make -j $(nproc) 
  #     make install
  #     cd ..
  #     rm -rf rel-{{ SWIG_VERSION }}*

  # # install libtool
  # - name: Download libtool
  #   get_url:
  #     url: http://ftpmirror.gnu.org/libtool/libtool-{{ LIBTOOL_VERSION }}.tar.gz
  #     dest: /opt/libtool-{{ LIBTOOL_VERSION }}.tar.gz
  
  # - name: Extract libtool archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/libtool-{{ LIBTOOL_VERSION }}.tar.gz
  #     creates: /opt/libtool-{{ LIBTOOL_VERSION }}
  #     copy: no

  # - name: install libtool
  #   shell: | 
  #     cd /opt/libtool-{{ LIBTOOL_VERSION }}
  #     ./configure --prefix=/usr
  #     make -j $(nproc) 
  #     make install
  #     cd ..
  #     rm -rf libtool-{{ LIBTOOL_VERSION }}*
  #     ldconfig

  # # install rsync
  # - name: Download rsync
  #   get_url:
  #     url: https://download.samba.org/pub/rsync/src/rsync-{{ RSYNC_VERSION }}.tar.gz
  #     dest: /opt/rsync-{{ RSYNC_VERSION }}.tar.gz
  
  # - name: Extract rsync archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/rsync-{{ RSYNC_VERSION }}.tar.gz
  #     creates: /opt/rsync-{{ RSYNC_VERSION }}
  #     copy: no

  # - name: install rsync
  #   shell: | 
  #     cd /opt/rsync-{{ RSYNC_VERSION }}
  #     ./configure --prefix=/usr --disable-xxhash --disable-zstd --disable-lz4
  #     make -j $(nproc) 
  #     make install
  #     cd ..
  #     rm -rf rsync-{{ RSYNC_VERSION }}*
  #     ldconfig

  # # install python3.10.5
  # - name: Download python
  #   get_url:
  #     url: https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-{{ PYTHON_VERSION }}.tar.xz
  #     dest: /opt/Python-{{ PYTHON_VERSION }}.tar.xz
  
  # - name: Extract python archive
  #   unarchive:
  #     dest: /opt
  #     src: /opt/Python-{{ PYTHON_VERSION }}.tar.xz
  #     creates: /opt/Python-{{ PYTHON_VERSION }}
  #     copy: no

  # - name: install python
  #   shell: | 
  #     cd /opt/Python-{{ PYTHON_VERSION }}
  #     export CFLAGS=$(pkg-config --cflags openssl11)
  #     export LDFLAGS=$(pkg-config --libs openssl11)
  #     CXX=$(whereis g++|awk '{print $2}')  ./configure  --prefix=/usr --enable-shared --enable-optimizations
  #     make
  #     make install
  #     cd ..
  #     rm -rf Python-{{ PYTHON_VERSION }}*
  #     ldconfig
  #     pip3 install conan meson Ninja mako gcovr xmltodict